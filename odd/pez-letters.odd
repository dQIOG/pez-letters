<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>TEI Customization for <title>Pez Digital Edition</title></title>
            <principal>Thomas Wallnig</principal>
            <respStmt>
               <name>Daniel Schopper</name>
               <resp>creator</resp>
            </respStmt>
         </titleStmt>
         <publicationStmt>
            <publisher ref="https://ror.org/03anc3s24">Austrian Academy of Sciences</publisher>
            <publisher ref="https://ror.org/03prydq77">University of Vienna</publisher>
            <distributor ref="https://ror.org/028bsh698">Austrian Center for Digital Humanities and Cultural Heritage</distributor>
            <date when="2025-02-01">February 2025</date>
            <availability status="free">
               <licence target="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</licence>
            </availability>
            <address>
               <addrLine>Bäckerstraße 13</addrLine>
               <addrLine>1010 Vienna</addrLine>
               <addrLine>Austria</addrLine>
            </address>
         </publicationStmt>
         <sourceDesc>
            <p>This is a born-digital document.</p>
         </sourceDesc>
      </fileDesc>
   </teiHeader>
   <text>
      <body>
         <schemaSpec ident="pez" start="TEI">
            <moduleRef key="analysis"/>
            <moduleRef key="tei"/>
            <moduleRef key="core" select="add author bibl biblScope choice corr date del gap head hi listBibl mentioned note orig p pb ptr publisher ref relatedItem resp respStmt rs sic term title"/>
            <moduleRef key="header" select="abstract classCode correspAction correspContext correspDesc editionStmt encodingDesc fileDesc idno keywords listPrefixDef notesStmt prefixDef principal profileDesc publicationStmt seriesStmt sourceDesc teiHeader textClass titleStmt"/>
            <moduleRef key="linking" select="ab anchor listAnnotation seg standOff"/>
            <moduleRef key="msdescription" select="institution locus msDesc msIdentifier repository"/>
            <moduleRef key="namesdates" select="orgName persName placeName"/>
            <moduleRef key="textcrit" select="app lem listWit rdg witDetail witness"/>
            <moduleRef key="textstructure" select="TEI back body closer div front opener text"/>

            <elementSpec ident="ref" module="core" mode="change">
               <constraintSpec ident="ref-assert-letter-links" scheme="schematron">
                  <constraint>
                     <!-- Letter references -->
                     <sch:rule context="tei:ref[@type = 'letter'][not(exists(@target))][if (contains(.,'#')) then substring-before(.,'#') castable as xs:integer else . castable as xs:integer]">
                        <sch:let name="letterPath"
                           value="concat('../data/editions/pez_',format-number(xs:integer(if (contains(.,'#')) then substring-before(.,'#') else .) ,'000'),'.xml')"/>
                        <sch:report test="not(doc-available($letterPath))">Referenz auf Brief ID <sch:value-of select="."/> lässt sich nicht auflösen. Document <sch:value-of select="$letterPath"/> not avaiable.</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:ref[@type = 'letter'][not(exists(@target))]">
                        <sch:assert test="if (contains(.,'#')) then substring-before(.,'#') castable as xs:integer else . castable as xs:integer">Briefreferenz ist keine Nummer</sch:assert>
                     </sch:rule>
                     <sch:rule context="tei:ref[exists(@target)][some $ref in tokenize(@target,' ') satisfies starts-with($ref, 'letter:')]">
                        <sch:report test="some $ref in tokenize(@target,' ') satisfies not(doc-available(concat('../data/editions/pez_',format-number(xs:integer(if (contains($ref,'#')) then substring-before(substring-after($ref,'letter:'),'#') else substring-after($ref,'letter:')),'000'),'.xml',if(substring-after($ref,'#') != '') then concat('#',substring-after($ref,'#')) else '')))">Ein oder mehrere Referenzen auf Brief-IDs in "<sch:value-of select="@target"/>" lassen sich nicht auflösen.</sch:report>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
            </elementSpec>
            
            <elementSpec ident="ptr" module="core" mode="change">
               <constraintSpec ident="ptr-assert-letter-links" scheme="schematron">
                  <constraint>
                     <!-- Letter references -->
                     <sch:rule context="tei:ptr[some $ref in tokenize(@target,' ') satisfies starts-with($ref, 'letter:')]">
                        <sch:report test="some $ref in tokenize(@target,' ') satisfies not(doc-available(concat('../data/editions/pez_',substring-after($ref,'letter:'),'.xml')))">Ein oder mehrere Referenzen auf Brief-IDs in "<sch:value-of select="@target"/>" lassen sich nicht auflösen.</sch:report>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <attList>
                  <attDef ident="type" mode="change">
                     <valList type="closed">
                        <valItem ident="next"/>
                        <valItem ident="mentionedIn"/>
                        <valItem ident="prev"/>
                        <valItem ident="mentions"/>
                        <valItem ident="relatedToTraditionOf"/>
                        <valItem ident="sentWith"/>
                        <valItem ident="UNKNOWN"/>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>
            
            <elementSpec ident="rs" module="core" mode="change">
               <constraintSpec ident="rs-assert-index-links" scheme="schematron">
                  <constraint>
                     <!-- Index references -->
                     <sch:rule context="tei:rs[starts-with(@key, 'index:')]">
                        <sch:let name="path-to-indexes" value="'../data/legacy_indices/'"/>
                        <sch:let name="index-files"
                           value="for $i in (65 to 90) return doc(concat($path-to-indexes,'/',codepoints-to-string($i),'.xml')) "/>
                        <sch:assert
                           test="substring-after(@key,'index:') = $index-files//tei:item/@xml:id"
                           >Kein Index-Eintrag für ID '<sch:value-of
                              select="substring-after(@key,'index:')"/>' gefunden.</sch:assert>
                     </sch:rule>
                     <!-- Bibliography references -->
                     <sch:rule context="tei:rs[@type = 'bibl']">
                        <sch:let name="path-to-bibliography" value="'../data/indices/listbibl.xml'"/>
                        <sch:let name="bibliography" value="doc($path-to-bibliography)"/>
                        <sch:assert
                           test="concat('b',substring-after(@ref,'bibl:')) = $bibliography//tei:biblStruct/@xml:id"
                           >Kein Index-Eintrag für "<sch:value-of select="."/>" (ID <sch:value-of
                              select="substring-after(@ref,'bibl:')"/>) gefunden.</sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
            </elementSpec>
         </schemaSpec>
      </body>
   </text>
</TEI>
