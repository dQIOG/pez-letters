<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>TEI Customization for <title>Pez Digital Edition</title></title>
            <principal>Thomas Wallnig</principal>
            <respStmt>
               <name>Daniel Schopper</name>
               <resp>creator</resp>
            </respStmt>
         </titleStmt>
         <publicationStmt>
            <publisher ref="https://ror.org/03anc3s24">Austrian Academy of Sciences</publisher>
            <publisher ref="https://ror.org/03prydq77">University of Vienna</publisher>
            <distributor ref="https://ror.org/028bsh698">Austrian Center for Digital Humanities and Cultural Heritage</distributor>
            <date when="2025-02-01">February 2025</date>
            <availability status="free">
               <licence target="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</licence>
            </availability>
            <address>
               <addrLine>Bäckerstraße 13</addrLine>
               <addrLine>1010 Vienna</addrLine>
               <addrLine>Austria</addrLine>
            </address>
         </publicationStmt>
         <sourceDesc>
            <p>This is a born-digital document.</p>
         </sourceDesc>
      </fileDesc>
   </teiHeader>
   <text>
      <body>
         <schemaSpec ident="pez" start="TEI">
            <moduleRef key="analysis"/>
            <moduleRef key="tei"/>
            <moduleRef key="core" select="add author bibl biblScope choice corr date del gap head hi listBibl mentioned note orig p pb ptr publisher ref relatedItem resp respStmt rs sic term title"/>
            <moduleRef key="header" select="abstract classCode correspAction correspContext correspDesc editionStmt encodingDesc fileDesc idno keywords listPrefixDef notesStmt prefixDef principal profileDesc publicationStmt seriesStmt sourceDesc teiHeader textClass titleStmt"/>
            <moduleRef key="linking" select="ab anchor listAnnotation seg standOff"/>
            <moduleRef key="msdescription" select="institution locus msDesc msIdentifier repository"/>
            <moduleRef key="namesdates" select="orgName persName placeName"/>
            <moduleRef key="textcrit" select="app lem listWit rdg witDetail witness"/>
            <moduleRef key="textstructure" select="TEI back body closer div front opener text"/>

            <elementSpec ident="ref" module="core" mode="change">
               <constraintSpec ident="ref-assert-letter-links" scheme="schematron">
                  <constraint>
                     <!-- Letter references -->
                     <!-- ref elements with type "letter" without an explicit @target contain the letter ID: <ref type="letter">1030</ref> -->
                     <sch:rule context="tei:ref[@type = 'letter'][not(exists(@target))]">
                        <sch:let name="letterIDString" value="if (substring-before(.,'#') != '') then substring-before(.,'#') else ."/>
                        <sch:let name="letterID" value="if ($letterIDString castable as xs:integer) then format-number(xs:integer($letterIDString) ,'000') else ''"/>
                        <sch:let name="letterPath" value="concat('../data/editions/pez_',$letterID,'.xml')"/>
                        <sch:report test="$letterIDString = ''">Leere Referenz auf Brief-ID</sch:report>
                        <sch:report test="not($letterIDString castable as xs:integer)">Briefreferenz "<sch:value-of select="$letterIDString"/>" ist keine Nummer</sch:report>
                        <sch:report test="not(doc-available($letterPath))">Referenz auf Brief-ID "<sch:value-of select="$letterID"/>" lässt sich nicht auflösen. Document <sch:value-of select="$letterPath"/> not avaiable.</sch:report>
                     </sch:rule>
                     <!-- ref elements can also reference a letter using the uri prefix "letter" and a non-zero-padded number, optionally followed by a fragment identifier: <ref target="letter:3#seg1">any text</ref> -->
                     <sch:rule context="tei:ref[exists(@target)][some $ref in tokenize(@target,' ') satisfies starts-with($ref, 'letter:')]">
                        <sch:assert test="every $ref in tokenize(@target,' ')[starts-with(.,'letter:')] satisfies matches($ref, '^letter:\d{1,4}(#\w+)?$')">Brief-Referenzen mit dem "letter:" Präfix dürfen nur aus 1–4 Nummern, optional gefolgt von eine Fragment-Identifier bestehen.</sch:assert>
                        <sch:report test="some $ref in tokenize(@target,' ')[starts-with(.,'letter:')] satisfies not(doc-available(concat('../data/editions/pez_',format-number(xs:integer(if (substring-before(substring-after($ref,'letter:'),'#') != '') then substring-before(substring-after($ref,'letter:'),'#') else substring-after($ref,'letter:')),'000'),'.xml',if(substring-after($ref,'#') != '') then concat('#',substring-after($ref,'#')) else '')))">Ein oder mehrere Referenzen auf Brief-IDs in "<sch:value-of select="@target"/>" lassen sich nicht auflösen.</sch:report>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
            </elementSpec>
            
            <elementSpec ident="p" module="core" mode="change">
               <attList>
                  <attDef ident="corresp" mode="change">
                     <constraintSpec ident="corresp-on-p" scheme="schematron">
                        <constraint>
                           <sch:rule context="tei:p[starts-with(@corresp, '#')]">
                              <sch:let name="id" value="substring-after(@corresp,'#')"/>
                              <sch:report test="not(exists(root()//*[@xml:id=$id]))">ID-Referenz "<sch:value-of select="@corresp"/>" kann nicht aufgelöst werden.</sch:report>
                           </sch:rule>
                        </constraint>
                     </constraintSpec>
                  </attDef>
               </attList>
            </elementSpec>
            
            <elementSpec ident="note" module="core" mode="change">
               <attList>
                  <attDef ident="target" mode="change">
                     <constraintSpec ident="target-on-not" scheme="schematron">
                        <constraint>
                           <!-- range references must follow the form #range(right({id-of-start-milestone}), left({id-of-start-milestone})) -->
                           <sch:rule context="tei:note[starts-with(@target, '#range')]">
                              <sch:let name="range-pointer-regex" value="'^\s*#range\(right\(''(.+?)''\), left\(''(.+?)''\)\s*'"/>
                              <sch:let name="milestone-ids" value="analyze-string(@target,$range-pointer-regex)"/>
                              <sch:let name="id-of-start-milestone" value="$milestone-ids//*:group[@nr=1]"/>
                              <sch:let name="id-of-end-milestone" value="$milestone-ids//*:group[@nr=2]"/>
                              <sch:assert test="exists($milestone-ids//*:match)">Range-Pointer in "<sch:value-of select="@target"/>" folgt nicht dem Format "#range(right({id}), left({id}))"</sch:assert>
                              <sch:report test="not(exists(root()//*[@xml:id=$id-of-start-milestone]))">ID-Referenz zu Start-Milestone "<sch:value-of select="$id-of-start-milestone"/>" kann nicht aufgelöst werden.</sch:report>
                              <sch:report test="not(exists(root()//*[@xml:id=$id-of-end-milestone]))">ID-Referenz zu End-Milestone "<sch:value-of select="$id-of-end-milestone"/>" kann nicht aufgelöst werden.</sch:report>
                           </sch:rule>
                        </constraint>
                     </constraintSpec>
                  </attDef>
               </attList>
            </elementSpec>
            
            
            <elementSpec ident="ptr" module="core" mode="change">
               <constraintSpec ident="ptr-assert-letter-links" scheme="schematron">
                  <constraint>
                     <!-- Letter references -->
                     <sch:rule context="tei:ptr[some $ref in tokenize(@target,' ') satisfies starts-with($ref, 'letter:')]">
                        <sch:report test="some $ref in tokenize(@target,' ') satisfies not(doc-available(concat('../data/editions/pez_',substring-after($ref,'letter:'),'.xml')))">Ein oder mehrere Referenzen auf Brief-IDs in "<sch:value-of select="@target"/>" lassen sich nicht auflösen.</sch:report>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <attList>
                  <attDef ident="type" mode="change">
                     <valList type="closed">
                        <valItem ident="next"/>
                        <valItem ident="mentionedIn"/>
                        <valItem ident="prev"/>
                        <valItem ident="mentions"/>
                        <valItem ident="relatedToTraditionOf"/>
                        <valItem ident="sentWith"/>
                        <valItem ident="UNKNOWN"/>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>
            
            <elementSpec ident="rs" module="core" mode="change">
               <constraintSpec ident="rs-assert-index-links" scheme="schematron">
                  <constraint>
                     <!-- Index references -->
                     <sch:rule context="tei:rs[starts-with(@key, 'index:')]">
                        <sch:let name="path-to-indexes" value="'../data/legacy_indices/'"/>
                        <sch:let name="index-files"
                           value="for $i in (65 to 90) return doc(concat($path-to-indexes,'/',codepoints-to-string($i),'.xml')) "/>
                        <sch:assert
                           test="substring-after(@key,'index:') = $index-files//tei:item/@xml:id"
                           >Kein Index-Eintrag für ID '<sch:value-of
                              select="substring-after(@key,'index:')"/>' gefunden.</sch:assert>
                     </sch:rule>
                     <!-- Bibliography references -->
                     <sch:rule context="tei:rs[@type = 'bibl']">
                        <sch:let name="path-to-bibliography" value="'../data/indices/listbibl.xml'"/>
                        <sch:let name="bibliography" value="doc($path-to-bibliography)"/>
                        <sch:assert
                           test="concat('b',substring-after(@ref,'bibl:')) = $bibliography//tei:biblStruct/@xml:id"
                           >Kein Index-Eintrag für "<sch:value-of select="."/>" (ID <sch:value-of
                              select="substring-after(@ref,'bibl:')"/>) gefunden.</sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
            </elementSpec>
         </schemaSpec>
      </body>
   </text>
</TEI>
